buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = minecraft_version + "-" + mod_version

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir { dirs 'dev' }
    maven { url = "https://jitpack.io" } // Mixin Squared
    maven { url = "https://www.cursemaven.com" } // CurseForge
    maven { url = "https://mymavenrepo.com/repo/XXNTQu0VdMr93BjoOV1S/" } // Trajectory Preview
    maven { url = "https://maven.blamejared.com/" } // JEI
    maven { url = "https://maven.theillusivec4.top/" } // Curios
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("dev:FiltPick:forge-mc1.19.2-0.0.2") // 0.0.2

    implementation fg.deobf("curse.maven:quality-food-973932:5411711") // 1.4.5

    implementation fg.deobf("curse.maven:apotheosis-313970:5322410") // 6.5.1
    implementation fg.deobf("curse.maven:placebo-283644:5180198") //7.4.0

    compileOnly fg.deobf("curse.maven:sophisticated-core-618298:4808232") // 0.5.98.459

    compileOnly fg.deobf("curse.maven:better-tridents-666941:4368296") // 4.0.2

    /* --- Compatibility --- */
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")

    /* --- Mixin Configuration --- */
    implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:${mixin_squared_version}"))
    implementation(jarJar("com.github.bawnorton.mixinsquared:mixinsquared-forge:${mixin_squared_version}")) {
        jarJar.ranged(it, "[${mixin_squared_version},)")
    }

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            forge_version    : forge_version,
            mod_id           : mod_id,
            mod_name         : mod_name,
            mod_license      : mod_license,
            mod_version      : mod_version,
            mod_author       : mod_author,
            mod_description  : mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}